# Name:Admin tools
# Meta bannner: http://devs.farkhodovme.tk/bannerget/bloody/admintools.png
# scope:hikka_only
# scope:hikka_min 1.6.0
# meta developer:@shyatzd
# Commands:
# .ban | .unban | .kick | .promote | .demote | .prefix


from .. import loader, utils, security
import logging

from telethon.tl.types import ChatAdminRights, ChatBannedRights, PeerUser, PeerChannel
from telethon.errors import BadRequestError
from telethon.tl.functions.channels import EditAdminRequest, EditBannedRequest
from telethon.tl.functions.messages import EditChatAdminRequest

logger = logging.getLogger(__name__)

@loader.tds
class admMod(loader.Module):
    """модуль для более лёгкого контроля вашего чата"""
    
    strings_en = {
        "name": "AdminTools",
        "description": "module for easier control of your chat",
        "not_supergroup": "<b>dude, this is not a supergroup!</b>",
        "not_group": "<b>dude, this is not a group!</b>",
        "ban_none": "<b>who volunteered for the ban?</b>",
        "unban_none": "<b>who wants to come back?</b>",
        "kick_none": "<b>who to fuck off?</b>",
        "promote_none": "<b>who to give admin0chku</b>",
        "demote_none": "<b>who wants to lose admin0chku</b>",
        "prefix_none": "<b>who to raise in rank?</b>",
        "who": "<b>whom?</b>",
        "not_admin": "<b>I'm a sucker, give me permission.</b>",
        "banned": "<code>{}</code> <b>say goodbye to the person </b>\n<b>ID:</b> <code>{}</code>",
        "unbanned": "<code>{}</code> <b>welcome back </b>\n<b>ID:</b> <code>{}</code>",
        "kicked": "<code>{}</code> <b>there was a person and somehow disappeared, wow.</b>\n<b>ID:</b> <code>{}</code>",
        "promoted": "<code>{}</code> <b>Dobby is free, Dobby has rights</b>\n<b>ID:</b> <code>{}</code>",
        "demoted": "<code>{}</code> <b>Dobby is not free, Dobby's rights have been taken away!</b>\n<b>ID:</b> <code>{}</code>",
        "prefixed": "<code>{}</code> <b>Dobby up, Dobby got a prefix!</b>\n<b>ID:</b> <code>{}</code>", 
    }

    strings_ru = {
        "name": "AdminTools",
        "description": "модуль для более лёгкого контроля вашего чата",
        "not_supergroup": "<b>это не супергруппа!</b>",
        "not_group": "<b>а это не группа!</b>",
        "ban_none": "<b>кто добровольцем в бан?</b>",
        "unban_none": "<b>кто хочет сюда?</b>",
        "kick_none": "<b>Кто хочет принудительно покинуть чат?</b>",
        "promote_none": "<b>Кто хочет админ0чку?</b>",
        "demote_none": "<b>кто хочет решиться админки</b>",
        "prefix_none": "<b>кто достоин левел-апа?</b>",
        "who": "<b>Кого...?</b>",
        "not_admin": "<b>я тут лох дайте права</b>",
        "banned": "<code>{}</code> <b>бб-бай бай</b>\n<b>ID:</b> <code>{}</code>",
        "unbanned": "<code>{}</code> <b>вусап бро</b>\n<b>ID:</b> <code>{}</code>",
        "kicked": "<code>{}</code> <b>был и хоба не стало!</b>\n<b>ID:</b> <code>{}</code>",
        "promoted": "<code>{}</code> <b>нашёл права администратора!</b>\n<b>ID:</b> <code>{}</code>",
        "demoted": "<code>{}</code> <b>лох просрал права администратора!</b>\n<b>ID:</b> <code>{}</code>",
        "prefixed": "<code>{}</code> <b>красава, поднялся на первый уровень!</b>\n<b>ID:</b> <code>{}</code>", 
    }
    
    @loader.command(en_doc="")
    @loader.group_admin_ban_users
    @loader.ratelimit
    async def bancmd(self, message):
        """banned for hesossss (@ или Reply)"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, self.strings("not_supergroup", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("ban_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            await self.client(
                EditBannedRequest(
                    message.chat_id,
                    user.id,
                    ChatBannedRights(until_date=None, view_messages=True),
                )
            )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "ban", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("banned", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_ban_users
    @loader.ratelimit
    async def unbancmd(self, message):
        """вернуть агро, потому что он угарный (@ или Reply)"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, self.strings("not_supergroup", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("unban_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            await self.client(
                EditBannedRequest(
                    message.chat_id,
                    user.id,
                    ChatBannedRights(until_date=None, view_messages=False),
                )
            )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "unban", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("unbanned", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_ban_users
    @loader.ratelimit
    async def kickcmd(self, message):
        """послать агро в окно (@ или Reply) (жаль быстро вернётся)"""
        if isinstance(message.to_id, PeerUser):
            return await utils.answer(message, self.strings("not_group", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("kick_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        if user.is_self:
            if not (
                await message.client.is_bot()
                or await self.allmodules.check_security(
                    message, security.OWNER | security.SUDO
                )
            ):
                return
        try:
            await self.client.kick_participant(message.chat_id, user.id)
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "kick", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("kicked", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    @loader.ratelimit
    async def promotecmd(self, message):
        """поднять в звание (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if not args:
                return await utils.answer(
                    message, self.strings("promote_none", message)
                )
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        rank = ""
        if len(args) >= 1:
            rank = " ".join(args[1:])
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=True,
                            change_info=None,
                            ban_users=True,
                            delete_messages=True,
                            pin_messages=None,
                            edit_messages=None,
                            manage_call=True,
                            
                        ),
                        rank,
                    )
                )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "promote", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("promoted", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    @loader.ratelimit
    async def prefixcmd(self, message):
        """поднять в звание (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if not args:
                return await utils.answer(
                    message, self.strings("prefix_none", message)
                )
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        rank = ""
        if len(args) >= 1:
            rank = " ".join(args[1:])
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=None,
                            change_info=None,
                            ban_users=None,
                            delete_messages=None,
                            pin_messages=None,
                            edit_messages=None,
                            manage_call=True,
                            
                        ),
                        rank,
                    )
                )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "prefix", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("prefixed", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    async def demotecmd(self, message):
        """сослать нищенку с поста (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("demote_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=None,
                            change_info=None,
                            ban_users=None,
                            delete_messages=None,
                            pin_messages=None,
                            edit_messages=None,
                        ),
                        "",
                    )
                )
            else:
                await self.client(EditChatAdminRequest(message.chat_id, user.id, False))
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "demote", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("demoted", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

     @loader.command(ru_doc="")
    @loader.group_admin_ban_users
    @loader.ratelimit
    async def bancmd(self, message):
        """послать агро далеко и надолго (@ или Reply)"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, self.strings("not_supergroup", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("ban_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            await self.client(
                EditBannedRequest(
                    message.chat_id,
                    user.id,
                    ChatBannedRights(until_date=None, view_messages=True),
                )
            )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "ban", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("banned", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_ban_users
    @loader.ratelimit
    async def unbancmd(self, message):
        """вернуть агро, потому что он угарный (@ или Reply)"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, self.strings("not_supergroup", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("unban_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            await self.client(
                EditBannedRequest(
                    message.chat_id,
                    user.id,
                    ChatBannedRights(until_date=None, view_messages=False),
                )
            )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "unban", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("unbanned", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_ban_users
    @loader.ratelimit
    async def kickcmd(self, message):
        """послать агро в окно (@ или Reply) (жаль быстро вернётся)"""
        if isinstance(message.to_id, PeerUser):
            return await utils.answer(message, self.strings("not_group", message))
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("kick_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        if user.is_self:
            if not (
                await message.client.is_bot()
                or await self.allmodules.check_security(
                    message, security.OWNER | security.SUDO
                )
            ):
                return
        try:
            await self.client.kick_participant(message.chat_id, user.id)
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "kick", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("kicked", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    @loader.ratelimit
    async def promotecmd(self, message):
        """поднять в звание (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if not args:
                return await utils.answer(
                    message, self.strings("promote_none", message)
                )
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        rank = ""
        if len(args) >= 1:
            rank = " ".join(args[1:])
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=True,
                            change_info=None,
                            ban_users=True,
                            delete_messages=True,
                            pin_messages=None,
                            edit_messages=None,
                            manage_call=True,
                            
                        ),
                        rank,
                    )
                )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "promote", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("promoted", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    @loader.ratelimit
    async def prefixcmd(self, message):
        """поднять в звание (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if not args:
                return await utils.answer(
                    message, self.strings("prefix_none", message)
                )
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        rank = ""
        if len(args) >= 1:
            rank = " ".join(args[1:])
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=None,
                            change_info=None,
                            ban_users=None,
                            delete_messages=None,
                            pin_messages=None,
                            edit_messages=None,
                            manage_call=True,
                            
                        ),
                        rank,
                    )
                )
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "prefix", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("prefixed", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

    @loader.group_admin_add_admins
    async def demotecmd(self, message):
        """сослать нищенку с поста (@ или Reply)"""
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, self.strings("demote_none", message))
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, self.strings("who", message))
        logger.debug(user)
        try:
            if message.is_channel:
                await self.client(
                    EditAdminRequest(
                        message.chat_id,
                        user.id,
                        ChatAdminRights(
                            post_messages=None,
                            add_admins=None,
                            invite_users=None,
                            change_info=None,
                            ban_users=None,
                            delete_messages=None,
                            pin_messages=None,
                            edit_messages=None,
                        ),
                        "",
                    )
                )
            else:
                await self.client(EditChatAdminRequest(message.chat_id, user.id, False))
        except BadRequestError:
            await utils.answer(message, self.strings("not_admin", message))
        else:
            await self.allmodules.log(
                "demote", group=message.chat_id, affected_uids=[user.id]
            )
            await utils.answer(
                message,
                self.strings("demoted", message).format(
                    utils.escape_html(user.first_name), user.id
                ),
            )

async def client_ready(self, client, db):
        self.client = client
